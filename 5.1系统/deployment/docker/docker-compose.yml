version: '3.8'

services:
  # 统一API网关 - 端口3000
  unified-gateway:
    build:
      context: ../../unified-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - RUST_LOG=debug
      - JWT_SECRET=your-super-secret-jwt-key
    depends_on:
      - redis
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 日志监控服务 - 端口3001 (45个API)
  logging-service:
    build:
      context: ../../logging-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - RUST_LOG=debug
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/logging_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 清洗配置服务 - 端口3002 (52个API)
  cleaning-service:
    build:
      context: ../../cleaning-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - RUST_LOG=debug
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/cleaning_db
    depends_on:
      - postgres
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 策略监控服务 - 端口3003 (38个API)
  strategy-service:
    build:
      context: ../../strategy-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - RUST_LOG=debug
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/strategy_db
    depends_on:
      - postgres
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 性能调优服务 - 端口3004 (67个API)
  performance-service:
    build:
      context: ../../performance-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - RUST_LOG=debug
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/performance_db
    depends_on:
      - postgres
    networks:
      - api-network
    restart: unless-stopped
    privileged: true  # 需要系统级权限进行性能调优
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 交易监控服务 - 端口3005 (41个API)
  trading-service:
    build:
      context: ../../trading-service
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    environment:
      - RUST_LOG=debug
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/trading_db
    depends_on:
      - postgres
    networks:
      - api-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # AI模型服务 - 端口3006 (48个API)
  ai-model-service:
    build:
      context: ../../ai-model-service
      dockerfile: Dockerfile
    ports:
      - "3006:3006"
    environment:
      - RUST_LOG=debug
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ai_model_db
    depends_on:
      - postgres
    networks:
      - api-network
    restart: unless-stopped
    volumes:
      - ai-models:/app/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3006/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 配置管理服务 - 端口3007 (96个API)
  config-service:
    build:
      context: ../../config-service
      dockerfile: Dockerfile
    ports:
      - "3007:3007"
    environment:
      - RUST_LOG=debug
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/config_db
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    networks:
      - api-network
    restart: unless-stopped
    volumes:
      - config-data:/app/config
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3007/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL数据库
  postgres:
    image: postgres:15
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_MULTIPLE_DATABASES=logging_db,cleaning_db,strategy_db,performance_db,trading_db,ai_model_db,config_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
    networks:
      - api-network
    ports:
      - "5432:5432"
    restart: unless-stopped

  # Redis缓存和消息队列
  redis:
    image: redis:7-alpine
    volumes:
      - redis-data:/data
    networks:
      - api-network
    ports:
      - "6379:6379"
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - api-network
    restart: unless-stopped

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3080:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana
    networks:
      - api-network
    restart: unless-stopped

networks:
  api-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
  ai-models:
  config-data: