import re; with open("src/adapters/huobi.rs", "r") as f: content = f.read(); new_method = """    async fn get_initial_snapshot(&self, symbol: &Symbol, exchange_symbol: &str) -> Result<MarketDataMessage, MarketDataError> { let url = format!("https://api.huobi.pro/market/depth?symbol={}&type=step0", exchange_symbol.to_lowercase()); let client = reqwest::Client::new(); let response = client.get(&url).send().await.map_err(|e| MarketDataError::ConnectionError(format!("获取快照失败: {}", e)))?; let data = response.json::<serde_json::Value>().await.map_err(|e| MarketDataError::ParseError(format!("解析快照失败: {}", e)))?; if data.get("status").and_then(|s| s.as_str()) == Some("ok") { if let Some(message) = self.parse_orderbook(&data)? { return Ok(message); } } Err(MarketDataError::ParseError("获取快照失败: 无效响应".to_string())) }"""; pattern = r"async fn get_initial_snapshot.*?}"; modified_content = re.sub(pattern, new_method, content, flags=re.DOTALL); with open("src/adapters/huobi.rs", "w") as f: f.write(modified_content)
