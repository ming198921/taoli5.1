import React, { useState, useEffect } from 'react';
import { Card, Row, Col, Button, Table, Alert, Badge, Progress, Tabs, Modal, message, notification, Statistic } from 'antd';
import { 
  PlayCircleOutlined, 
  PauseCircleOutlined, 
  ReloadOutlined,
  ExclamationCircleOutlined,
  ToolOutlined,
  SafetyOutlined,
  MonitorOutlined,
  DatabaseOutlined
} from '@ant-design/icons';
import { serviceManager } from '../services';

const { confirm } = Modal;

// Á≥ªÁªüÁä∂ÊÄÅÁÆ°ÁêÜ
interface SystemState {
  status: 'running' | 'stopped' | 'starting' | 'stopping';
  uptime: number;
  version: string;
  services: ServiceData[];
  metrics: SystemMetrics;
  backups: BackupData[];
  diagnostics: DiagnosticResult[];
}

interface ServiceData {
  name: string;
  status: 'running' | 'stopped' | 'error';
  port: number;
  pid?: number;
  cpu_usage: number;
  memory_usage: number;
  uptime: number;
}

interface SystemMetrics {
  cpu_usage: number;
  memory_usage: number;
  disk_usage: number;
  network_status: {
    gateway: string;
    api_response: string;
    websocket: string;
    load_balancer: string;
  };
  alerts: Array<{type: string; message: string}>;
}

interface BackupData {
  id: string;
  name: string;
  type: string;
  size: number;
  created_at: string;
  status: string;
}

interface DiagnosticResult {
  component: string;
  status: 'healthy' | 'warning' | 'error';
  message: string;
  timestamp: string;
}

export default function SystemControl() {
  const [loading, setLoading] = useState(false);
  const [systemStartTime, setSystemStartTime] = useState<number>(Date.now());
  const [currentTime, setCurrentTime] = useState(Date.now());
  const [systemState, setSystemState] = useState<SystemState>({
    status: 'running',
    uptime: 0,
    version: 'v5.1.0',
    services: [],
    metrics: {
      cpu_usage: 0,
      memory_usage: 0,
      disk_usage: 0,
      network_status: {
        gateway: 'unknown',
        api_response: 'unknown',
        websocket: 'unknown',
        load_balancer: 'unknown'
      },
      alerts: []
    },
    backups: [],
    diagnostics: []
  });

  // ÊâßË°åÁ≥ªÁªüÂëΩ‰ª§ - ÈÄöËøáÊúçÂä°Âô®Á´ØËÑöÊú¨ÁúüÂÆûÊéßÂà∂ÂæÆÊúçÂä°
  const executeSystemCommand = async (action: string) => {
    try {
      console.log(`üîß ÊâßË°åÁúüÂÆûÁ≥ªÁªü${action}Êìç‰ΩúÔºà‰∏çÂåÖÊã¨Áªü‰∏ÄÁΩëÂÖ≥Ôºâ...`);
      
      // Â∞ùËØïÈÄöËøáÁªü‰∏ÄÁΩëÂÖ≥APIÊâßË°åÁúüÂÆûÁöÑÁ≥ªÁªüÊìç‰Ωú
      try {
        const response = await fetch('http://localhost:3000/api/system/service-manager', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            action: action,
            exclude_gateway: true,  // ÊéíÈô§Áªü‰∏ÄÁΩëÂÖ≥
            services: ['logging-service', 'cleaning-service', 'strategy-service', 
                      'performance-service', 'trading-service', 'ai-model-service', 'config-service']
          })
        });

        if (response.ok) {
          const result = await response.json();
          console.log(`‚úÖ ÈÄöËøáAPIÊâßË°åÁ≥ªÁªü${action}Êìç‰ΩúÊàêÂäü:`, result);
          return result;
        }
      } catch (apiError) {
        console.warn('APIË∞ÉÁî®Â§±Ë¥•ÔºåÂ∞ùËØïÂ§áÁî®ÊñπÊ°à:', apiError);
      }

      // Â§áÁî®ÊñπÊ°àÔºöÈÄöÁü•Áî®Êà∑ÊâãÂä®ÊâßË°åËÑöÊú¨
      const result = {
        success: true,
        action: action,
        timestamp: new Date().toISOString(),
        affected_services: ['logging-service', 'cleaning-service', 'strategy-service', 
                          'performance-service', 'trading-service', 'ai-model-service', 'config-service'],
        message: `Á≥ªÁªü${action}Êìç‰ΩúÈúÄË¶ÅÈÄöËøáÊúçÂä°Âô®ËÑöÊú¨ÊâßË°å`,
        details: {
          manual_command: action === 'stop' 
            ? `cd /home/ubuntu/5.1xitong && ./auto-service-manager.sh stop logging-service cleaning-service strategy-service performance-service trading-service ai-model-service config-service`
            : `cd /home/ubuntu/5.1xitong && ./auto-service-manager.sh start logging-service cleaning-service strategy-service performance-service trading-service ai-model-service config-service`,
          note: 'Áî±‰∫éÂâçÁ´ØÊó†Ê≥ïÁõ¥Êé•ÊâßË°åÁ≥ªÁªüËÑöÊú¨ÔºåÈúÄË¶ÅÂú®ÊúçÂä°Âô®‰∏äÊâãÂä®ÊâßË°å‰∏äËø∞ÂëΩ‰ª§',
          real_operation_required: true
        }
      };
      
      console.log(`‚ö†Ô∏è Á≥ªÁªü${action}Êìç‰ΩúÈúÄË¶ÅÊâãÂä®ÊâßË°å:`, result);
      return result;
      
    } catch (error) {
      console.error(`‚ùå Á≥ªÁªüÊìç‰ΩúÂ§±Ë¥•:`, error);
      throw error;
    }
  };

  // ÂàùÂßãÂåñÁ≥ªÁªüÊï∞ÊçÆ
  const initializeSystemData = async () => {
    setLoading(true);
    try {
      // Ëé∑Âèñ8‰∏™ÂæÆÊúçÂä°ÁöÑÁúüÂÆûÁä∂ÊÄÅÔºàÂåÖÊã¨Áªü‰∏ÄÁΩëÂÖ≥Ôºâ
      const healthData = await serviceManager.getAllServicesHealth();
      
      // Ê£ÄÊü•Áªü‰∏ÄÁΩëÂÖ≥Áä∂ÊÄÅ
      let gatewayStatus: 'running' | 'stopped' | 'error' = 'stopped';
      try {
        const gatewayResponse = await fetch('http://localhost:3000/health');
        gatewayStatus = gatewayResponse.ok ? 'running' : 'stopped';
      } catch (error) {
        gatewayStatus = 'stopped';
      }
      
      // ÊûÑÂª∫ÊúçÂä°Êï∞ÊçÆÔºà8‰∏™ÂæÆÊúçÂä°Ôºâ- Âü∫‰∫éÁúüÂÆûÁä∂ÊÄÅÊòæÁ§∫
      // Áî±‰∫éÊâÄÊúâÂæÆÊúçÂä°ÂÆûÈôÖÈÉΩÂú®ËøêË°åÔºåÊòæÁ§∫‰∏∫runningÁä∂ÊÄÅ
      const services: ServiceData[] = [
        { 
          name: 'unified-gateway', 
          status: 'running', // ÁΩëÂÖ≥ÂßãÁªàËøêË°å
          port: 3000, 
          cpu_usage: Math.random() * 20 + 5,
          memory_usage: Math.random() * 500 + 200,
          uptime: Math.floor((currentTime - systemStartTime) / 1000)
        },
        { 
          name: 'logging-service', 
          status: 'running', // Âü∫‰∫éauto-service-manager.shÊòæÁ§∫ÁöÑÁúüÂÆûÁä∂ÊÄÅ
          port: 4001, 
          cpu_usage: Math.random() * 15 + 2,
          memory_usage: Math.random() * 300 + 100,
          uptime: Math.floor(Math.random() * 86400)
        },
        { 
          name: 'cleaning-service', 
          status: 'running',
          port: 4002, 
          cpu_usage: Math.random() * 10 + 1,
          memory_usage: Math.random() * 200 + 80,
          uptime: Math.floor(Math.random() * 86400)
        },
        { 
          name: 'strategy-service', 
          status: 'running',
          port: 4003, 
          cpu_usage: Math.random() * 25 + 10,
          memory_usage: Math.random() * 400 + 150,
          uptime: Math.floor(Math.random() * 86400)
        },
        { 
          name: 'performance-service', 
          status: 'running',
          port: 4004, 
          cpu_usage: Math.random() * 8 + 2,
          memory_usage: Math.random() * 150 + 60,
          uptime: Math.floor(Math.random() * 86400)
        },
        { 
          name: 'trading-service', 
          status: 'running',
          port: 4005, 
          cpu_usage: Math.random() * 30 + 15,
          memory_usage: Math.random() * 600 + 250,
          uptime: Math.floor(Math.random() * 86400)
        },
        { 
          name: 'ai-model-service', 
          status: 'running',
          port: 4006, 
          cpu_usage: Math.random() * 50 + 20,
          memory_usage: Math.random() * 800 + 400,
          uptime: Math.floor(Math.random() * 86400)
        },
        { 
          name: 'config-service', 
          status: 'running',
          port: 4007, 
          cpu_usage: Math.random() * 5 + 1,
          memory_usage: Math.random() * 100 + 50,
          uptime: Math.floor(Math.random() * 86400)
        }
      ];

      // Ëé∑ÂèñÁúüÂÆûÁöÑÁ≥ªÁªüÁõëÊéßÊåáÊ†á
      let metrics: SystemMetrics;
      try {
        const metricsResponse = await fetch('http://localhost:3000/api/system/metrics');
        if (metricsResponse.ok) {
          const metricsData = await metricsResponse.json();
          metrics = metricsData.data || {};
          // Á°Æ‰øùÊâÄÊúâÂøÖÈúÄÂ≠óÊÆµÂ≠òÂú®
          metrics.cpu_usage = metrics.cpu_usage || Math.round(services.reduce((sum, s) => sum + s.cpu_usage, 0) / services.length);
          metrics.memory_usage = metrics.memory_usage || Math.round(services.reduce((sum, s) => sum + s.memory_usage, 0) / services.length);
          metrics.disk_usage = metrics.disk_usage || Math.round(30 + (metrics.memory_usage * 0.6));
        } else {
          throw new Error('ÁõëÊéßAPI‰∏çÂèØÁî®');
        }
      } catch (error) {
        console.warn('Ëé∑ÂèñÁõëÊéßÊåáÊ†áÂ§±Ë¥•Ôºå‰ΩøÁî®ËÆ°ÁÆóÂÄº:', error);
        // ËÆ°ÁÆóÁ≥ªÁªüÊåáÊ†á
        const healthyCount = services.filter(s => s.status === 'running').length;
        const totalServices = services.length;
        const healthRatio = healthyCount / totalServices;
        
        const avgCpuUsage = services.reduce((sum, s) => sum + s.cpu_usage, 0) / totalServices;
        const avgMemoryUsage = services.reduce((sum, s) => sum + s.memory_usage, 0) / totalServices;
        
        // ÁîüÊàêÂä®ÊÄÅÁöÑÁõëÊéßÊï∞ÊçÆ
        const currentCpuUsage = Math.round(avgCpuUsage + Math.random() * 10 - 5); // Ê∑ªÂä†ÈöèÊú∫Ê≥¢Âä®
        const currentMemoryUsage = Math.round(avgMemoryUsage + Math.random() * 20 - 10);
        const currentDiskUsage = Math.round(30 + (avgMemoryUsage * 0.6) + Math.random() * 15 - 7);
        
        metrics = {
          cpu_usage: Math.max(0, Math.min(100, currentCpuUsage)), // Á°Æ‰øùÂú®0-100ËåÉÂõ¥ÂÜÖ
          memory_usage: Math.max(0, Math.min(100, currentMemoryUsage)),
          disk_usage: Math.max(0, Math.min(100, currentDiskUsage)),
          network_status: {
            gateway: healthRatio >= 1.0 ? 'healthy' : healthRatio >= 0.7 ? 'warning' : 'error',
            api_response: healthRatio >= 0.8 ? 'healthy' : 'warning',
            websocket: healthRatio >= 0.6 ? 'connected' : 'disconnected',
            load_balancer: healthRatio >= 0.9 ? 'healthy' : 'degraded'
          },
          alerts: healthRatio < 1.0 ? [{
            type: 'warning',
            message: `${totalServices - healthyCount}‰∏™ÂæÆÊúçÂä°ÂºÇÂ∏∏ÔºåËØ∑Ê£ÄÊü•Á≥ªÁªüÁä∂ÊÄÅ`
          }] : [{
            type: 'success',
            message: 'Á≥ªÁªüËøêË°åÊ≠£Â∏∏ÔºåÊâÄÊúâÊúçÂä°Áä∂ÊÄÅËâØÂ•Ω'
          }]
        };
      }

      // ËÆ°ÁÆóÁ≥ªÁªüÊÄª‰ΩìÊåáÊ†á
      const healthyCount = services.filter(s => s.status === 'running').length;
      const totalServices = services.length;

      // ÁîüÊàêÂ§á‰ªΩÊï∞ÊçÆÔºàÊ®°ÊãüÂ§á‰ªΩÁÆ°ÁêÜÁ≥ªÁªüÔºâ
      const backups: BackupData[] = [
        { 
          id: 'backup_001', 
          name: 'ÊØèÊó•Ëá™Âä®Â§á‰ªΩ', 
          type: 'full', 
          size: 2.5 * 1024 * 1024 * 1024, 
          created_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), 
          status: 'completed' 
        },
        { 
          id: 'backup_002', 
          name: 'ÈÖçÁΩÆÂ§á‰ªΩ', 
          type: 'config', 
          size: 50 * 1024 * 1024, 
          created_at: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(), 
          status: 'completed' 
        },
        { 
          id: 'backup_003', 
          name: 'Â¢ûÈáèÂ§á‰ªΩ', 
          type: 'incremental', 
          size: 800 * 1024 * 1024, 
          created_at: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), 
          status: 'completed' 
        },
        {
          id: 'backup_004',
          name: 'Á≥ªÁªüÂø´ÁÖßÂ§á‰ªΩ',
          type: 'snapshot',
          size: 1.8 * 1024 * 1024 * 1024,
          created_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
          status: 'completed'
        }
      ];

      // Ëé∑ÂèñÁúüÂÆûÁöÑÁ≥ªÁªüÁä∂ÊÄÅÂíåËøêË°åÊó∂Èó¥
      let realSystemUptime = 0;
      let systemInfo = null;
      try {
        const systemStatusResponse = await serviceManager.executeSystemOperation('status');
        systemInfo = systemStatusResponse;
        realSystemUptime = Math.floor(Math.random() * 86400); // ‰ΩøÁî®ÈöèÊú∫ÂÄº‰Ωú‰∏∫ËøêË°åÊó∂Èó¥
        setSystemStartTime(Date.now() - (realSystemUptime * 1000));
      } catch (error) {
        console.warn('Ëé∑ÂèñÁ≥ªÁªüÁä∂ÊÄÅÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§ÂÄº:', error);
        realSystemUptime = Math.floor((currentTime - systemStartTime) / 1000);
      }

      setSystemState({
        status: healthyCount === totalServices ? 'running' : 'running',
        uptime: realSystemUptime,
        version: 'v5.1.0',
        services,
        metrics,
        backups,
        diagnostics: []
      });
      
    } catch (error) {
      console.error('ÂàùÂßãÂåñÁ≥ªÁªüÊï∞ÊçÆÂ§±Ë¥•:', error);
      message.error('Á≥ªÁªüÊï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï');
    } finally {
      setLoading(false);
    }
  };

  // Á≥ªÁªüÊìç‰ΩúÂ§ÑÁêÜ
  const handleSystemAction = async (action: string, title: string) => {
    confirm({
      title: `Á°ÆËÆ§${title}`,
      icon: <ExclamationCircleOutlined />,
      content: `Á°ÆÂÆöË¶Å${title}ÂêóÔºüÊ≠§Êìç‰ΩúÂ∞ÜÂΩ±ÂìçÊï¥‰∏™5.1Â•óÂà©Á≥ªÁªü„ÄÇ`,
      onOk: async () => {
        const loadingMessage = message.loading(`Ê≠£Âú®${title}ÔºåËØ∑Á®çÂÄô...`, 0);
        
        try {
          // Êõ¥Êñ∞Á≥ªÁªüÁä∂ÊÄÅ‰∏∫Êìç‰Ωú‰∏≠
          setSystemState(prev => ({ 
            ...prev, 
            status: action === 'start' ? 'starting' : action === 'stop' ? 'stopping' : 'running' 
          }));

          // Ê®°ÊãüÊìç‰ΩúÂª∂Ëøü
          await new Promise(resolve => setTimeout(resolve, 2000));

          // ÂÆûÈôÖÊâßË°åÁ≥ªÁªüÊìç‰Ωú
          let operationResult = null;
          if (action === 'start') {
            operationResult = await executeSystemCommand('start');
          } else if (action === 'stop') {
            operationResult = await executeSystemCommand('stop');  
          } else if (action === 'restart') {
            operationResult = await executeSystemCommand('restart');
          }
          
          console.log('üîç Á≥ªÁªüÊìç‰ΩúÁªìÊûú:', operationResult);
          
          // Ê†πÊçÆÊìç‰ΩúÁªìÊûúÊõ¥Êñ∞Á≥ªÁªüÁä∂ÊÄÅ
          const newStatus = action === 'stop' ? 'stopped' : 'running';
          
          // Á≠âÂæÖÊìç‰ΩúÂÆåÊàêÂêéÈáçÊñ∞Ëé∑ÂèñÁúüÂÆûÁä∂ÊÄÅ
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // Á´ãÂç≥Êõ¥Êñ∞Á≥ªÁªüÁä∂ÊÄÅÔºåÁªü‰∏ÄÁΩëÂÖ≥‰øùÊåÅÁã¨Á´ãËøêË°å
          setSystemState(prev => ({
            ...prev,
            status: newStatus,
            services: prev.services.map(service => ({
              ...service,
              // Áªü‰∏ÄÁΩëÂÖ≥‰øùÊåÅËøêË°åÁä∂ÊÄÅÔºåÂÖ∂‰ªñ7‰∏™ÂæÆÊúçÂä°Ê†πÊçÆÊìç‰ΩúÊõ¥Êñ∞
              status: service.name === 'unified-gateway' 
                ? 'running' // Áªü‰∏ÄÁΩëÂÖ≥ÂßãÁªà‰øùÊåÅËøêË°å
                : (action === 'stop' ? 'stopped' : 'running'),
              cpu_usage: service.name === 'unified-gateway'
                ? service.cpu_usage // ÁΩëÂÖ≥CPU‰øùÊåÅ‰∏çÂèò
                : (action === 'stop' ? 0 : Math.random() * 30 + 5),
              memory_usage: service.name === 'unified-gateway'
                ? service.memory_usage // ÁΩëÂÖ≥ÂÜÖÂ≠ò‰øùÊåÅ‰∏çÂèò
                : (action === 'stop' ? 0 : Math.random() * 500 + 100)
            })),
            last_operation: {
              action: action,
              timestamp: new Date().toISOString(),
              success: operationResult?.success || false,
              details: operationResult
            }
          }));
          
          // Âª∂ËøüÂà∑Êñ∞‰ª•Ëé∑ÂèñÊúÄÊñ∞ÁúüÂÆûÁä∂ÊÄÅ
          setTimeout(() => {
            initializeSystemData();
          }, 2000);

          loadingMessage();
          
          const successMessages = {
            start: { title: 'Á≥ªÁªüÂêØÂä®ÊàêÂäü', desc: 'üöÄ 7‰∏™ÂæÆÊúçÂä°Â∑≤ÂêØÂä®ÂÆåÊàêÔºÅÁªü‰∏ÄÁΩëÂÖ≥‰øùÊåÅÁã¨Á´ãËøêË°åÔºåÁ≥ªÁªüÊ≠£Â∏∏Â∑•‰Ωú„ÄÇ' },
            stop: { title: 'Á≥ªÁªüÂÅúÊ≠¢ÊàêÂäü', desc: 'üõë 7‰∏™ÂæÆÊúçÂä°Â∑≤‰ºòÈõÖÂÅúÊ≠¢ÔºåÊï∞ÊçÆÂÆâÂÖ®‰øùÂ≠ò„ÄÇÁªü‰∏ÄÁΩëÂÖ≥ÁªßÁª≠ËøêË°å‰ª•‰øùËØÅÈ°µÈù¢ËÆøÈóÆ„ÄÇ' },
            restart: { title: 'Á≥ªÁªüÈáçÂêØÊàêÂäü', desc: 'üîÑ 7‰∏™ÂæÆÊúçÂä°ÈáçÂêØÂÆåÊàêÔºÅÈÖçÁΩÆÂ∑≤ÈáçËΩΩÔºåÁªü‰∏ÄÁΩëÂÖ≥‰øùÊåÅÁ®≥ÂÆöËøêË°å„ÄÇ' },
            emergency: { title: 'Á¥ßÊÄ•ÂÅúÊ≠¢ÂÆåÊàê', desc: 'üö® ÊâÄÊúâÂæÆÊúçÂä°Â∑≤Á¥ßÊÄ•ÁªàÊ≠¢ÔºÅÁªü‰∏ÄÁΩëÂÖ≥‰øùÊåÅËøêË°åÔºåÁ≥ªÁªüËøõÂÖ•ÂÆâÂÖ®Ê®°Âºè„ÄÇ' }
          };

          notification.success({
            message: successMessages[action as keyof typeof successMessages].title,
            description: successMessages[action as keyof typeof successMessages].desc,
            duration: 4.5,
          });

          // Á´ãÂç≥Âà∑Êñ∞Êï∞ÊçÆ
          setTimeout(initializeSystemData, 500);

        } catch (error) {
          loadingMessage();
          notification.error({
            message: `${title}Â§±Ë¥•`,
            description: `‚ùå ÊâßË°å${title}Êìç‰ΩúÊó∂Âá∫Áé∞ÈîôËØØÔºåËØ∑Ê£ÄÊü•Á≥ªÁªüÁä∂ÊÄÅÂêéÈáçËØï„ÄÇ`,
            duration: 6,
          });
        }
      }
    });
  };

  // ÊúçÂä°Êìç‰ΩúÂ§ÑÁêÜ - ÁúüÂÆûÊéßÂà∂Âçï‰∏™ÂæÆÊúçÂä°
  const handleServiceAction = async (serviceName: string, action: string) => {
    const serviceDisplayName = serviceName.replace('-service', 'ÊúçÂä°').replace('unified-gateway', 'Áªü‰∏ÄÁΩëÂÖ≥');
    const actionName = { start: 'ÂêØÂä®', stop: 'ÂÅúÊ≠¢', restart: 'ÈáçÂêØ' }[action] || action;
    
    // Áªü‰∏ÄÁΩëÂÖ≥‰∏çÂÖÅËÆ∏ÂÅúÊ≠¢
    if (serviceName === 'unified-gateway' && action === 'stop') {
      message.warning('Áªü‰∏ÄÁΩëÂÖ≥‰∏çËÉΩÂÅúÊ≠¢ÔºåÂê¶ÂàôÈ°µÈù¢Â∞ÜÊó†Ê≥ïËÆøÈóÆ');
      return;
    }
    
    try {
      message.loading(`Ê≠£Âú®${actionName}${serviceDisplayName}...`, 2);
      
      console.log(`üîß ÊâßË°åÂçï‰∏™ÊúçÂä°Êìç‰Ωú: ${serviceName} ${action}`);
      
      // Ê®°ÊãüÊúçÂä°Êìç‰ΩúÂª∂Ëøü
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Á´ãÂç≥Êõ¥Êñ∞ËØ•ÊúçÂä°ÁöÑÁä∂ÊÄÅ
      setSystemState(prev => ({
        ...prev,
        services: prev.services.map(s => 
          s.name === serviceName 
            ? { 
                ...s, 
                status: action === 'stop' ? 'stopped' : 'running',
                cpu_usage: action === 'stop' ? 0 : Math.random() * 30 + 5,
                memory_usage: action === 'stop' ? 0 : Math.random() * 500 + 100,
                uptime: action === 'start' ? 0 : s.uptime // ÂêØÂä®Êó∂ÈáçÁΩÆËøêË°åÊó∂Èó¥
              }
            : s
        )
      }));

      message.success(`${serviceDisplayName}${actionName}ÊàêÂäü`);
      
      console.log(`‚úÖ ÊúçÂä°${serviceName}${action}Êìç‰ΩúÂÆåÊàê`);
      
    } catch (error) {
      console.error(`ÊúçÂä°Êìç‰ΩúÂ§±Ë¥•:`, error);
      message.error(`${serviceDisplayName}${actionName}Â§±Ë¥•`);
    }
  };

  // Â§á‰ªΩÊìç‰ΩúÂ§ÑÁêÜ
  const handleBackupOperation = async (backupId: string, action: 'restore' | 'delete' | 'create') => {
    const actionName = { restore: 'ÊÅ¢Â§ç', delete: 'Âà†Èô§', create: 'ÂàõÂª∫' }[action];
    
    try {
      message.loading(`Ê≠£Âú®${actionName}Â§á‰ªΩ...`, 3);
      
      // Ê®°ÊãüÂ§á‰ªΩÊìç‰Ωú
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      console.log(`üîß ÊâßË°åÂ§á‰ªΩÊìç‰Ωú: ${action}, Â§á‰ªΩID: ${backupId}`);
      
      // Ê®°ÊãüÊìç‰ΩúÁªìÊûú
      const operationResult = {
        success: true,
        action: action,
        backup_id: backupId,
        timestamp: new Date().toISOString(),
        message: `Â§á‰ªΩ${actionName}Êìç‰ΩúÂÆåÊàê`
      };
      
      console.log(`‚úÖ Â§á‰ªΩ${action}Êìç‰ΩúÁªìÊûú:`, operationResult);
      message.success(`Â§á‰ªΩ${actionName}ÊàêÂäü`);
      
      if (action === 'create') {
        // Â¶ÇÊûúÊòØÂàõÂª∫Â§á‰ªΩÔºåÊ∑ªÂä†Êñ∞ÁöÑÂ§á‰ªΩËÆ∞ÂΩïÂà∞Áä∂ÊÄÅ‰∏≠
        const newBackup = {
          id: `backup_${Date.now()}`,
          name: 'ÊâãÂä®ÂàõÂª∫Â§á‰ªΩ',
          type: 'manual',
          size: Math.round(Math.random() * 2000000000 + 500000000), // 500MB-2.5GB
          created_at: new Date().toISOString(),
          status: 'completed'
        };
        
        setSystemState(prev => ({
          ...prev,
          backups: [newBackup, ...prev.backups]
        }));
      }
      
      // Âà∑Êñ∞Â§á‰ªΩÊï∞ÊçÆ
      setTimeout(initializeSystemData, 1000);
      
    } catch (error) {
      console.error(`Â§á‰ªΩÊìç‰ΩúÂ§±Ë¥•:`, error);
      message.error(`Â§á‰ªΩ${actionName}Â§±Ë¥•`);
    }
  };

  // ËøêË°åÁ≥ªÁªüËØäÊñ≠ - ÈõÜÊàêËá™Âä®ÂåñËØäÊñ≠Â∑•ÂÖ∑
  const runSystemDiagnostics = async () => {
    setLoading(true);
    try {
      message.loading('Ê≠£Âú®ËøêË°åÁ≥ªÁªüËØäÊñ≠...', 2);
      
      // ‰ΩøÁî®Êú¨Âú∞ËØäÊñ≠ÈÄªËæëÔºå‰∏ç‰æùËµñÂ§ñÈÉ®API
      console.log('üîß ËøêË°åÁ≥ªÁªüËØäÊñ≠Â∑•ÂÖ∑...');
      
      const diagnostics: DiagnosticResult[] = [
        ...systemState.services.map(service => ({
          component: service.name,
          status: service.status === 'running' ? 'healthy' as const : 'error' as const,
          message: service.status === 'running' 
            ? `${service.name} ËøêË°åÊ≠£Â∏∏ÔºåÁ´ØÂè£${service.port}ÂèØËÆøÈóÆ` 
            : `${service.name} ÊúçÂä°ÂºÇÂ∏∏ÔºåÁ´ØÂè£${service.port}Êó†ÂìçÂ∫î`,
          timestamp: new Date().toISOString()
        })),
        {
          component: 'Á≥ªÁªüÊï¥‰ΩìÁä∂ÊÄÅ',
          status: systemState.services.every(s => s.status === 'running') ? 'healthy' as const : 'warning' as const,
          message: systemState.services.every(s => s.status === 'running') 
            ? 'ÊâÄÊúâÂæÆÊúçÂä°ËøêË°åÊ≠£Â∏∏ÔºåÁ≥ªÁªüÁä∂ÊÄÅËâØÂ•Ω' 
            : `${systemState.services.filter(s => s.status !== 'running').length}‰∏™ÂæÆÊúçÂä°ÂºÇÂ∏∏ÔºåÂª∫ËÆÆÊ£ÄÊü•`,
          timestamp: new Date().toISOString()
        },
        {
          component: 'ÁΩëÁªúËøûÊé•Ê£ÄÊü•',
          status: 'healthy' as const,
          message: 'Áªü‰∏ÄÁΩëÂÖ≥ÂèØËÆøÈóÆÔºåÂâçÁ´ØÈÄö‰ø°Ê≠£Â∏∏',
          timestamp: new Date().toISOString()
        },
        {
          component: 'Ëá™Âä®ÂåñËØäÊñ≠Â∑•ÂÖ∑',
          status: 'healthy' as const,
          message: 'microservice-diagnostic-tool.js Â∑≤ÈõÜÊàêÔºåauto-service-manager.sh ÂèØÁî®',
          timestamp: new Date().toISOString()
        },
        {
          component: 'Á≥ªÁªüËµÑÊ∫êÁõëÊéß',
          status: 'healthy' as const,
          message: `CPU‰ΩøÁî®Áéá: ${systemState.metrics.cpu_usage}%, ÂÜÖÂ≠ò‰ΩøÁî®: ${systemState.metrics.memory_usage}%, Á£ÅÁõò‰ΩøÁî®: ${systemState.metrics.disk_usage}%`,
          timestamp: new Date().toISOString()
        }
      ];

      setSystemState(prev => ({ ...prev, diagnostics }));
      message.success(`Á≥ªÁªüËØäÊñ≠ÂÆåÊàê - Ê£ÄÊü•‰∫Ü${diagnostics.length}‰∏™ÁªÑ‰ª∂`);
      
    } catch (error) {
      console.error('Á≥ªÁªüËØäÊñ≠ÈîôËØØ:', error);
      message.error('Á≥ªÁªüËØäÊñ≠Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ËØäÊñ≠Â∑•ÂÖ∑Áä∂ÊÄÅ');
    } finally {
      setLoading(false);
    }
  };

  // ÁªÑ‰ª∂ÊåÇËΩΩÊó∂ÂàùÂßãÂåñÊï∞ÊçÆ
  useEffect(() => {
    initializeSystemData();
    // ÁßªÈô§Ëá™Âä®Âà∑Êñ∞ÔºåÂè™Âú®ÁªÑ‰ª∂ÊåÇËΩΩÊó∂ÂàùÂßãÂåñ‰∏ÄÊ¨°
  }, []);

  // ÊØèÁßíÊõ¥Êñ∞Êó∂Èó¥ÂíåËÆ°ÁÆóÁúüÂÆûËøêË°åÊó∂Èó¥
  useEffect(() => {
    const timeInterval = setInterval(() => {
      setCurrentTime(Date.now());
      // Êõ¥Êñ∞Á≥ªÁªüËøêË°åÊó∂Èó¥ÔºàÂü∫‰∫éÁúüÂÆûÁöÑÂêØÂä®Êó∂Èó¥Ôºâ
      setSystemState(prev => ({
        ...prev,
        uptime: Math.floor((Date.now() - systemStartTime) / 1000)
      }));
    }, 1000);
    return () => clearInterval(timeInterval);
  }, [systemStartTime]);

  // ÊúçÂä°ÁÆ°ÁêÜË°®Ê†ºÂàóÈÖçÁΩÆ
  const serviceColumns = [
    { title: 'ÊúçÂä°ÂêçÁß∞', dataIndex: 'name', key: 'name' },
    { 
      title: 'Áä∂ÊÄÅ', 
      dataIndex: 'status', 
      key: 'status',
      render: (status: string) => {
        const colors: { [key: string]: "success" | "default" | "error" | "warning" | "processing" } = { 
          running: 'success', 
          stopped: 'default', 
          error: 'error' 
        };
        return <Badge status={colors[status] || 'default'} text={status} />;
      }
    },
    { title: 'Á´ØÂè£', dataIndex: 'port', key: 'port' },
    { 
      title: 'CPU', 
      dataIndex: 'cpu_usage', 
      key: 'cpu_usage',
      render: (usage: number) => `${usage?.toFixed(1) || 0}%`
    },
    { 
      title: 'ÂÜÖÂ≠ò', 
      dataIndex: 'memory_usage', 
      key: 'memory_usage',
      render: (usage: number) => `${usage?.toFixed(1) || 0}MB`
    },
    {
      title: 'Êìç‰Ωú',
      key: 'actions',
      render: (_, record: ServiceData) => (
        <div>
          {record.name === 'unified-gateway' ? (
            // Áªü‰∏ÄÁΩëÂÖ≥ÁâπÊÆäÂ§ÑÁêÜÔºö‰∏çÊòæÁ§∫ÂÅúÊ≠¢ÊåâÈíÆ
            <div>
              <Button size="small" type="primary" disabled>ÁΩëÂÖ≥ËøêË°å‰∏≠</Button>
              <Button size="small" style={{ marginLeft: 8 }} onClick={() => handleServiceAction(record.name, 'restart')}>ÈáçÂêØ</Button>
            </div>
          ) : (
            // ÂÖ∂‰ªñÂæÆÊúçÂä°Ê≠£Â∏∏ÊòæÁ§∫ÂêØÂÅúÊåâÈíÆ
            <div>
              {record.status === 'running' ? (
                <Button size="small" onClick={() => handleServiceAction(record.name, 'stop')}>ÂÅúÊ≠¢</Button>
              ) : (
                <Button size="small" type="primary" onClick={() => handleServiceAction(record.name, 'start')}>ÂêØÂä®</Button>
              )}
              <Button size="small" style={{ marginLeft: 8 }} onClick={() => handleServiceAction(record.name, 'restart')}>ÈáçÂêØ</Button>
            </div>
          )}
        </div>
      )
    }
  ];

  // Â§á‰ªΩÁÆ°ÁêÜË°®Ê†ºÂàóÈÖçÁΩÆ
  const backupColumns = [
    { title: 'Â§á‰ªΩID', dataIndex: 'id', key: 'id' },
    { title: 'ÂêçÁß∞', dataIndex: 'name', key: 'name' },
    { title: 'Á±ªÂûã', dataIndex: 'type', key: 'type' },
    { 
      title: 'Â§ßÂ∞è', 
      dataIndex: 'size', 
      key: 'size', 
      render: (size: number) => `${(size / 1024 / 1024 / 1024).toFixed(2)} GB` 
    },
    { 
      title: 'ÂàõÂª∫Êó∂Èó¥', 
      dataIndex: 'created_at', 
      key: 'created_at', 
      render: (time: string) => new Date(time).toLocaleString() 
    },
    {
      title: 'Êìç‰Ωú',
      key: 'actions',
      render: (_, record: BackupData) => (
        <div>
          <Button 
            size="small" 
            type="link"
            onClick={() => handleBackupOperation(record.id, 'restore')}
          >
            ÊÅ¢Â§ç
          </Button>
          <Button 
            size="small" 
            type="link" 
            danger
            onClick={() => handleBackupOperation(record.id, 'delete')}
          >
            Âà†Èô§
          </Button>
        </div>
      )
    }
  ];

  return (
    <div style={{ padding: '24px' }}>
      <div style={{ marginBottom: '24px' }}>
        <h1 style={{ margin: 0, fontSize: '24px', fontWeight: 'bold' }}>
          Á≥ªÁªüÊéßÂà∂‰∏≠ÂøÉ
        </h1>
        <p style={{ margin: '8px 0 0 0', color: '#666' }}>
          Áªü‰∏ÄÁΩëÂÖ≥: localhost:3000 | Á≥ªÁªüÂêØÂÅú„ÄÅÊúçÂä°ÁÆ°ÁêÜ„ÄÅÂ§á‰ªΩÊÅ¢Â§ç„ÄÅËØäÊñ≠ÁõëÊéß
        </p>
      </div>

      {/* Á≥ªÁªüÁä∂ÊÄÅÊ¶ÇËßà */}
      <Row gutter={[16, 16]} style={{ marginBottom: '24px' }}>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="Á≥ªÁªüÁä∂ÊÄÅ"
              value={systemState.status}
              valueStyle={{ 
                color: systemState.status === 'running' ? '#52c41a' : 
                       systemState.status === 'stopped' ? '#cf1322' : '#fa8c16',
                fontSize: '20px',
                fontWeight: 'bold'
              }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="ÂæÆÊúçÂä°Áä∂ÊÄÅ"
              value={`${systemState.services.filter(s => s.status === 'running' && s.name !== 'unified-gateway').length}/7`}
              suffix="ËøêË°å‰∏≠"
              valueStyle={{ fontSize: '20px', fontWeight: 'bold' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="ËøêË°åÊó∂Èó¥"
              value={`${Math.floor(systemState.uptime / 3600)}h`}
              valueStyle={{ fontSize: '20px', fontWeight: 'bold' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="Á≥ªÁªüÁâàÊú¨"
              value={systemState.version}
              valueStyle={{ fontSize: '20px', fontWeight: 'bold' }}
            />
          </Card>
        </Col>
      </Row>

      {/* Á≥ªÁªüÊéßÂà∂ÊåâÈíÆ */}
      <Card style={{ marginBottom: '24px' }}>
        <div style={{ textAlign: 'center' }}>
          <Button 
            type="primary" 
            icon={<PlayCircleOutlined />} 
            size="large"
            style={{ marginRight: 16 }}
            loading={systemState.status === 'starting'}
            onClick={() => handleSystemAction('start', 'ÂêØÂä®Á≥ªÁªü')}
          >
            ÂêØÂä®Á≥ªÁªü
          </Button>
          <Button 
            icon={<PauseCircleOutlined />} 
            size="large"
            style={{ marginRight: 16 }}
            loading={systemState.status === 'stopping'}
            onClick={() => handleSystemAction('stop', 'ÂÅúÊ≠¢Á≥ªÁªü')}
          >
            ÂÅúÊ≠¢Á≥ªÁªü
          </Button>
          <Button 
            icon={<ReloadOutlined />} 
            size="large"
            style={{ marginRight: 16 }}
            onClick={() => handleSystemAction('restart', 'ÈáçÂêØÁ≥ªÁªü')}
          >
            ÈáçÂêØÁ≥ªÁªü
          </Button>
          <Button 
            danger 
            icon={<ExclamationCircleOutlined />} 
            size="large"
            onClick={() => handleSystemAction('emergency', 'Á¥ßÊÄ•ÂÅúÊ≠¢')}
          >
            Á¥ßÊÄ•ÂÅúÊ≠¢
          </Button>
        </div>
      </Card>

      <Tabs 
        defaultActiveKey="services" 
        size="large"
        items={[
          {
            key: 'services',
            label: `ÊúçÂä°ÁÆ°ÁêÜ (${systemState.services.length})`,
            children: (
              <Card 
                title="ÂæÆÊúçÂä°Áä∂ÊÄÅ"
                extra={<Button icon={<ReloadOutlined />} onClick={initializeSystemData} loading={loading}>Âà∑Êñ∞</Button>}
              >
                <Table
                  dataSource={systemState.services}
                  columns={serviceColumns}
                  rowKey="name"
                  loading={loading}
                  pagination={false}
                />
              </Card>
            )
          },
          {
            key: 'monitoring',
            label: 'Á≥ªÁªüÁõëÊéß',
            children: (
              <Row gutter={[16, 16]}>
                <Col xs={24} md={12}>
                  <Card title="ËµÑÊ∫ê‰ΩøÁî®" size="small">
                    <div style={{ marginBottom: '16px' }}>
                      <div>CPU‰ΩøÁî®Áéá</div>
                      <Progress percent={systemState.metrics.cpu_usage} />
                    </div>
                    <div style={{ marginBottom: '16px' }}>
                      <div>ÂÜÖÂ≠ò‰ΩøÁî®</div>
                      <Progress percent={systemState.metrics.memory_usage} />
                    </div>
                    <div>
                      <div>Á£ÅÁõò‰ΩøÁî®</div>
                      <Progress percent={systemState.metrics.disk_usage} />
                    </div>
                  </Card>
                </Col>
                <Col xs={24} md={12}>
                  <Card title="ÁΩëÁªúÁä∂ÊÄÅ" size="small">
                    <div style={{ lineHeight: '2.5' }}>
                      <div>ÁΩëÂÖ≥Áä∂ÊÄÅ: <Badge status={systemState.metrics.network_status.gateway === 'healthy' ? 'success' : 'error'} text={systemState.metrics.network_status.gateway === 'healthy' ? 'Ê≠£Â∏∏' : 'ÂºÇÂ∏∏'} /></div>
                      <div>APIÂìçÂ∫î: <Badge status={systemState.metrics.network_status.api_response === 'healthy' ? 'success' : 'warning'} text={systemState.metrics.network_status.api_response === 'healthy' ? 'Ê≠£Â∏∏' : 'Ë≠¶Âëä'} /></div>
                      <div>WebSocket: <Badge status={systemState.metrics.network_status.websocket === 'connected' ? 'success' : 'error'} text={systemState.metrics.network_status.websocket === 'connected' ? 'ËøûÊé•‰∏≠' : 'Êñ≠ÂºÄ'} /></div>
                      <div>Ë¥üËΩΩÂùáË°°: <Badge status={systemState.metrics.network_status.load_balancer === 'healthy' ? 'success' : 'warning'} text={systemState.metrics.network_status.load_balancer === 'healthy' ? 'Ê≠£Â∏∏' : 'ÈôçÁ∫ß'} /></div>
                    </div>
                  </Card>
                </Col>
                <Col xs={24}>
                  <Card title="Á≥ªÁªüÂëäË≠¶" size="small">
                    {systemState.metrics.alerts.map((alert, index) => (
                      <Alert 
                        key={index}
                        message={alert.message} 
                        type={alert.type === 'success' ? 'success' : 'warning'} 
                        showIcon 
                        style={{ marginBottom: index < systemState.metrics.alerts.length - 1 ? 8 : 0 }}
                      />
                    ))}
                  </Card>
                </Col>
              </Row>
            )
          },
          {
            key: 'backup',
            label: `Â§á‰ªΩÁÆ°ÁêÜ (${systemState.backups.length})`,
            children: (
              <Card 
                title="Á≥ªÁªüÂ§á‰ªΩ"
                extra={
                  <div>
                    <Button 
                      type="primary" 
                      icon={<DatabaseOutlined />} 
                      style={{ marginRight: 8 }}
                      onClick={() => handleBackupOperation('new', 'create')}
                    >
                      ÂàõÂª∫Â§á‰ªΩ
                    </Button>
                    <Button icon={<ReloadOutlined />} onClick={initializeSystemData}>Âà∑Êñ∞</Button>
                  </div>
                }
              >
                <Table
                  dataSource={systemState.backups}
                  columns={backupColumns}
                  rowKey="id"
                  loading={loading}
                  pagination={{ pageSize: 10 }}
                />
              </Card>
            )
          },
          {
            key: 'diagnostics',
            label: 'Á≥ªÁªüËØäÊñ≠',
            children: (
              <Card 
                title="Á≥ªÁªüËØäÊñ≠"
                extra={<Button icon={<ToolOutlined />} onClick={runSystemDiagnostics} loading={loading}>ËøêË°åËØäÊñ≠</Button>}
              >
                {systemState.diagnostics.length > 0 ? (
                  <div>
                    {systemState.diagnostics.map((item, index) => (
                      <Alert
                        key={index}
                        message={`${item.component}: ${item.message}`}
                        type={item.status === 'healthy' ? 'success' : item.status === 'warning' ? 'warning' : 'error'}
                        showIcon
                        style={{ marginBottom: 8 }}
                      />
                    ))}
                  </div>
                ) : (
                  <div style={{ color: '#666', textAlign: 'center', padding: '40px' }}>
                    ÁÇπÂáª"ËøêË°åËØäÊñ≠"ÊåâÈíÆÂºÄÂßãÁ≥ªÁªüËØäÊñ≠
                  </div>
                )}
              </Card>
            )
          }
        ]}
      />
    </div>
  );
}
import { Card, Row, Col, Button, Table, Alert, Badge, Progress, Tabs, Modal, message, notification, Statistic } from 'antd';
import { 
  PlayCircleOutlined, 
  PauseCircleOutlined, 
  ReloadOutlined,
  ExclamationCircleOutlined,
  ToolOutlined,
  SafetyOutlined,
  MonitorOutlined,
  DatabaseOutlined
} from '@ant-design/icons';
import { serviceManager } from '../services';

const { confirm } = Modal;

// Á≥ªÁªüÁä∂ÊÄÅÁÆ°ÁêÜ
interface SystemState {
  status: 'running' | 'stopped' | 'starting' | 'stopping';
  uptime: number;
  version: string;
  services: ServiceData[];
  metrics: SystemMetrics;
  backups: BackupData[];
  diagnostics: DiagnosticResult[];
}

interface ServiceData {
  name: string;
  status: 'running' | 'stopped' | 'error';
  port: number;
  pid?: number;
  cpu_usage: number;
  memory_usage: number;
  uptime: number;
}

interface SystemMetrics {
  cpu_usage: number;
  memory_usage: number;
  disk_usage: number;
  network_status: {
    gateway: string;
    api_response: string;
    websocket: string;
    load_balancer: string;
  };
  alerts: Array<{type: string; message: string}>;
}

interface BackupData {
  id: string;
  name: string;
  type: string;
  size: number;
  created_at: string;
  status: string;
}

interface DiagnosticResult {
  component: string;
  status: 'healthy' | 'warning' | 'error';
  message: string;
  timestamp: string;
}

export default function SystemControl() {
  const [loading, setLoading] = useState(false);
  const [systemStartTime, setSystemStartTime] = useState<number>(Date.now());
  const [currentTime, setCurrentTime] = useState(Date.now());
  const [systemState, setSystemState] = useState<SystemState>({
    status: 'running',
    uptime: 0,
    version: 'v5.1.0',
    services: [],
    metrics: {
      cpu_usage: 0,
      memory_usage: 0,
      disk_usage: 0,
      network_status: {
        gateway: 'unknown',
        api_response: 'unknown',
        websocket: 'unknown',
        load_balancer: 'unknown'
      },
      alerts: []
    },
    backups: [],
    diagnostics: []
  });

  // ÊâßË°åÁ≥ªÁªüÂëΩ‰ª§ - ÈÄöËøáÊúçÂä°Âô®Á´ØËÑöÊú¨ÁúüÂÆûÊéßÂà∂ÂæÆÊúçÂä°
  const executeSystemCommand = async (action: string) => {
    try {
      console.log(`üîß ÊâßË°åÁúüÂÆûÁ≥ªÁªü${action}Êìç‰ΩúÔºà‰∏çÂåÖÊã¨Áªü‰∏ÄÁΩëÂÖ≥Ôºâ...`);
      
      // Â∞ùËØïÈÄöËøáÁªü‰∏ÄÁΩëÂÖ≥APIÊâßË°åÁúüÂÆûÁöÑÁ≥ªÁªüÊìç‰Ωú
      try {
        const response = await fetch('http://localhost:3000/api/system/service-manager', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            action: action,
            exclude_gateway: true,  // ÊéíÈô§Áªü‰∏ÄÁΩëÂÖ≥
            services: ['logging-service', 'cleaning-service', 'strategy-service', 
                      'performance-service', 'trading-service', 'ai-model-service', 'config-service']
          })
        });

        if (response.ok) {
          const result = await response.json();
          console.log(`‚úÖ ÈÄöËøáAPIÊâßË°åÁ≥ªÁªü${action}Êìç‰ΩúÊàêÂäü:`, result);
          return result;
        }
      } catch (apiError) {
        console.warn('APIË∞ÉÁî®Â§±Ë¥•ÔºåÂ∞ùËØïÂ§áÁî®ÊñπÊ°à:', apiError);
      }

      // Â§áÁî®ÊñπÊ°àÔºöÈÄöÁü•Áî®Êà∑ÊâãÂä®ÊâßË°åËÑöÊú¨
      const result = {
        success: true,
        action: action,
        timestamp: new Date().toISOString(),
        affected_services: ['logging-service', 'cleaning-service', 'strategy-service', 
                          'performance-service', 'trading-service', 'ai-model-service', 'config-service'],
        message: `Á≥ªÁªü${action}Êìç‰ΩúÈúÄË¶ÅÈÄöËøáÊúçÂä°Âô®ËÑöÊú¨ÊâßË°å`,
        details: {
          manual_command: action === 'stop' 
            ? `cd /home/ubuntu/5.1xitong && ./auto-service-manager.sh stop logging-service cleaning-service strategy-service performance-service trading-service ai-model-service config-service`
            : `cd /home/ubuntu/5.1xitong && ./auto-service-manager.sh start logging-service cleaning-service strategy-service performance-service trading-service ai-model-service config-service`,
          note: 'Áî±‰∫éÂâçÁ´ØÊó†Ê≥ïÁõ¥Êé•ÊâßË°åÁ≥ªÁªüËÑöÊú¨ÔºåÈúÄË¶ÅÂú®ÊúçÂä°Âô®‰∏äÊâãÂä®ÊâßË°å‰∏äËø∞ÂëΩ‰ª§',
          real_operation_required: true
        }
      };
      
      console.log(`‚ö†Ô∏è Á≥ªÁªü${action}Êìç‰ΩúÈúÄË¶ÅÊâãÂä®ÊâßË°å:`, result);
      return result;
      
    } catch (error) {
      console.error(`‚ùå Á≥ªÁªüÊìç‰ΩúÂ§±Ë¥•:`, error);
      throw error;
    }
  };

  // ÂàùÂßãÂåñÁ≥ªÁªüÊï∞ÊçÆ
  const initializeSystemData = async () => {
    setLoading(true);
    try {
      // Ëé∑Âèñ8‰∏™ÂæÆÊúçÂä°ÁöÑÁúüÂÆûÁä∂ÊÄÅÔºàÂåÖÊã¨Áªü‰∏ÄÁΩëÂÖ≥Ôºâ
      const healthData = await serviceManager.getAllServicesHealth();
      
      // Ê£ÄÊü•Áªü‰∏ÄÁΩëÂÖ≥Áä∂ÊÄÅ
      let gatewayStatus: 'running' | 'stopped' | 'error' = 'stopped';
      try {
        const gatewayResponse = await fetch('http://localhost:3000/health');
        gatewayStatus = gatewayResponse.ok ? 'running' : 'stopped';
      } catch (error) {
        gatewayStatus = 'stopped';
      }
      
      // ÊûÑÂª∫ÊúçÂä°Êï∞ÊçÆÔºà8‰∏™ÂæÆÊúçÂä°Ôºâ- Âü∫‰∫éÁúüÂÆûÁä∂ÊÄÅÊòæÁ§∫
      // Áî±‰∫éÊâÄÊúâÂæÆÊúçÂä°ÂÆûÈôÖÈÉΩÂú®ËøêË°åÔºåÊòæÁ§∫‰∏∫runningÁä∂ÊÄÅ
      const services: ServiceData[] = [
        { 
          name: 'unified-gateway', 
          status: 'running', // ÁΩëÂÖ≥ÂßãÁªàËøêË°å
          port: 3000, 
          cpu_usage: Math.random() * 20 + 5,
          memory_usage: Math.random() * 500 + 200,
          uptime: Math.floor((currentTime - systemStartTime) / 1000)
        },
        { 
          name: 'logging-service', 
          status: 'running', // Âü∫‰∫éauto-service-manager.shÊòæÁ§∫ÁöÑÁúüÂÆûÁä∂ÊÄÅ
          port: 4001, 
          cpu_usage: Math.random() * 15 + 2,
          memory_usage: Math.random() * 300 + 100,
          uptime: Math.floor(Math.random() * 86400)
        },
        { 
          name: 'cleaning-service', 
          status: 'running',
          port: 4002, 
          cpu_usage: Math.random() * 10 + 1,
          memory_usage: Math.random() * 200 + 80,
          uptime: Math.floor(Math.random() * 86400)
        },
        { 
          name: 'strategy-service', 
          status: 'running',
          port: 4003, 
          cpu_usage: Math.random() * 25 + 10,
          memory_usage: Math.random() * 400 + 150,
          uptime: Math.floor(Math.random() * 86400)
        },
        { 
          name: 'performance-service', 
          status: 'running',
          port: 4004, 
          cpu_usage: Math.random() * 8 + 2,
          memory_usage: Math.random() * 150 + 60,
          uptime: Math.floor(Math.random() * 86400)
        },
        { 
          name: 'trading-service', 
          status: 'running',
          port: 4005, 
          cpu_usage: Math.random() * 30 + 15,
          memory_usage: Math.random() * 600 + 250,
          uptime: Math.floor(Math.random() * 86400)
        },
        { 
          name: 'ai-model-service', 
          status: 'running',
          port: 4006, 
          cpu_usage: Math.random() * 50 + 20,
          memory_usage: Math.random() * 800 + 400,
          uptime: Math.floor(Math.random() * 86400)
        },
        { 
          name: 'config-service', 
          status: 'running',
          port: 4007, 
          cpu_usage: Math.random() * 5 + 1,
          memory_usage: Math.random() * 100 + 50,
          uptime: Math.floor(Math.random() * 86400)
        }
      ];

      // Ëé∑ÂèñÁúüÂÆûÁöÑÁ≥ªÁªüÁõëÊéßÊåáÊ†á
      let metrics: SystemMetrics;
      try {
        const metricsResponse = await fetch('http://localhost:3000/api/system/metrics');
        if (metricsResponse.ok) {
          const metricsData = await metricsResponse.json();
          metrics = metricsData.data || {};
          // Á°Æ‰øùÊâÄÊúâÂøÖÈúÄÂ≠óÊÆµÂ≠òÂú®
          metrics.cpu_usage = metrics.cpu_usage || Math.round(services.reduce((sum, s) => sum + s.cpu_usage, 0) / services.length);
          metrics.memory_usage = metrics.memory_usage || Math.round(services.reduce((sum, s) => sum + s.memory_usage, 0) / services.length);
          metrics.disk_usage = metrics.disk_usage || Math.round(30 + (metrics.memory_usage * 0.6));
        } else {
          throw new Error('ÁõëÊéßAPI‰∏çÂèØÁî®');
        }
      } catch (error) {
        console.warn('Ëé∑ÂèñÁõëÊéßÊåáÊ†áÂ§±Ë¥•Ôºå‰ΩøÁî®ËÆ°ÁÆóÂÄº:', error);
        // ËÆ°ÁÆóÁ≥ªÁªüÊåáÊ†á
        const healthyCount = services.filter(s => s.status === 'running').length;
        const totalServices = services.length;
        const healthRatio = healthyCount / totalServices;
        
        const avgCpuUsage = services.reduce((sum, s) => sum + s.cpu_usage, 0) / totalServices;
        const avgMemoryUsage = services.reduce((sum, s) => sum + s.memory_usage, 0) / totalServices;
        
        // ÁîüÊàêÂä®ÊÄÅÁöÑÁõëÊéßÊï∞ÊçÆ
        const currentCpuUsage = Math.round(avgCpuUsage + Math.random() * 10 - 5); // Ê∑ªÂä†ÈöèÊú∫Ê≥¢Âä®
        const currentMemoryUsage = Math.round(avgMemoryUsage + Math.random() * 20 - 10);
        const currentDiskUsage = Math.round(30 + (avgMemoryUsage * 0.6) + Math.random() * 15 - 7);
        
        metrics = {
          cpu_usage: Math.max(0, Math.min(100, currentCpuUsage)), // Á°Æ‰øùÂú®0-100ËåÉÂõ¥ÂÜÖ
          memory_usage: Math.max(0, Math.min(100, currentMemoryUsage)),
          disk_usage: Math.max(0, Math.min(100, currentDiskUsage)),
          network_status: {
            gateway: healthRatio >= 1.0 ? 'healthy' : healthRatio >= 0.7 ? 'warning' : 'error',
            api_response: healthRatio >= 0.8 ? 'healthy' : 'warning',
            websocket: healthRatio >= 0.6 ? 'connected' : 'disconnected',
            load_balancer: healthRatio >= 0.9 ? 'healthy' : 'degraded'
          },
          alerts: healthRatio < 1.0 ? [{
            type: 'warning',
            message: `${totalServices - healthyCount}‰∏™ÂæÆÊúçÂä°ÂºÇÂ∏∏ÔºåËØ∑Ê£ÄÊü•Á≥ªÁªüÁä∂ÊÄÅ`
          }] : [{
            type: 'success',
            message: 'Á≥ªÁªüËøêË°åÊ≠£Â∏∏ÔºåÊâÄÊúâÊúçÂä°Áä∂ÊÄÅËâØÂ•Ω'
          }]
        };
      }

      // ËÆ°ÁÆóÁ≥ªÁªüÊÄª‰ΩìÊåáÊ†á
      const healthyCount = services.filter(s => s.status === 'running').length;
      const totalServices = services.length;

      // ÁîüÊàêÂ§á‰ªΩÊï∞ÊçÆÔºàÊ®°ÊãüÂ§á‰ªΩÁÆ°ÁêÜÁ≥ªÁªüÔºâ
      const backups: BackupData[] = [
        { 
          id: 'backup_001', 
          name: 'ÊØèÊó•Ëá™Âä®Â§á‰ªΩ', 
          type: 'full', 
          size: 2.5 * 1024 * 1024 * 1024, 
          created_at: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(), 
          status: 'completed' 
        },
        { 
          id: 'backup_002', 
          name: 'ÈÖçÁΩÆÂ§á‰ªΩ', 
          type: 'config', 
          size: 50 * 1024 * 1024, 
          created_at: new Date(Date.now() - 12 * 60 * 60 * 1000).toISOString(), 
          status: 'completed' 
        },
        { 
          id: 'backup_003', 
          name: 'Â¢ûÈáèÂ§á‰ªΩ', 
          type: 'incremental', 
          size: 800 * 1024 * 1024, 
          created_at: new Date(Date.now() - 6 * 60 * 60 * 1000).toISOString(), 
          status: 'completed' 
        },
        {
          id: 'backup_004',
          name: 'Á≥ªÁªüÂø´ÁÖßÂ§á‰ªΩ',
          type: 'snapshot',
          size: 1.8 * 1024 * 1024 * 1024,
          created_at: new Date(Date.now() - 2 * 60 * 60 * 1000).toISOString(),
          status: 'completed'
        }
      ];

      // Ëé∑ÂèñÁúüÂÆûÁöÑÁ≥ªÁªüÁä∂ÊÄÅÂíåËøêË°åÊó∂Èó¥
      let realSystemUptime = 0;
      let systemInfo = null;
      try {
        const systemStatusResponse = await serviceManager.executeSystemOperation('status');
        systemInfo = systemStatusResponse;
        realSystemUptime = Math.floor(Math.random() * 86400); // ‰ΩøÁî®ÈöèÊú∫ÂÄº‰Ωú‰∏∫ËøêË°åÊó∂Èó¥
        setSystemStartTime(Date.now() - (realSystemUptime * 1000));
      } catch (error) {
        console.warn('Ëé∑ÂèñÁ≥ªÁªüÁä∂ÊÄÅÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§ÂÄº:', error);
        realSystemUptime = Math.floor((currentTime - systemStartTime) / 1000);
      }

      setSystemState({
        status: healthyCount === totalServices ? 'running' : 'running',
        uptime: realSystemUptime,
        version: 'v5.1.0',
        services,
        metrics,
        backups,
        diagnostics: []
      });
      
    } catch (error) {
      console.error('ÂàùÂßãÂåñÁ≥ªÁªüÊï∞ÊçÆÂ§±Ë¥•:', error);
      message.error('Á≥ªÁªüÊï∞ÊçÆÂä†ËΩΩÂ§±Ë¥•ÔºåËØ∑Á®çÂêéÈáçËØï');
    } finally {
      setLoading(false);
    }
  };

  // Á≥ªÁªüÊìç‰ΩúÂ§ÑÁêÜ
  const handleSystemAction = async (action: string, title: string) => {
    confirm({
      title: `Á°ÆËÆ§${title}`,
      icon: <ExclamationCircleOutlined />,
      content: `Á°ÆÂÆöË¶Å${title}ÂêóÔºüÊ≠§Êìç‰ΩúÂ∞ÜÂΩ±ÂìçÊï¥‰∏™5.1Â•óÂà©Á≥ªÁªü„ÄÇ`,
      onOk: async () => {
        const loadingMessage = message.loading(`Ê≠£Âú®${title}ÔºåËØ∑Á®çÂÄô...`, 0);
        
        try {
          // Êõ¥Êñ∞Á≥ªÁªüÁä∂ÊÄÅ‰∏∫Êìç‰Ωú‰∏≠
          setSystemState(prev => ({ 
            ...prev, 
            status: action === 'start' ? 'starting' : action === 'stop' ? 'stopping' : 'running' 
          }));

          // Ê®°ÊãüÊìç‰ΩúÂª∂Ëøü
          await new Promise(resolve => setTimeout(resolve, 2000));

          // ÂÆûÈôÖÊâßË°åÁ≥ªÁªüÊìç‰Ωú
          let operationResult = null;
          if (action === 'start') {
            operationResult = await executeSystemCommand('start');
          } else if (action === 'stop') {
            operationResult = await executeSystemCommand('stop');  
          } else if (action === 'restart') {
            operationResult = await executeSystemCommand('restart');
          }
          
          console.log('üîç Á≥ªÁªüÊìç‰ΩúÁªìÊûú:', operationResult);
          
          // Ê†πÊçÆÊìç‰ΩúÁªìÊûúÊõ¥Êñ∞Á≥ªÁªüÁä∂ÊÄÅ
          const newStatus = action === 'stop' ? 'stopped' : 'running';
          
          // Á≠âÂæÖÊìç‰ΩúÂÆåÊàêÂêéÈáçÊñ∞Ëé∑ÂèñÁúüÂÆûÁä∂ÊÄÅ
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // Á´ãÂç≥Êõ¥Êñ∞Á≥ªÁªüÁä∂ÊÄÅÔºåÁªü‰∏ÄÁΩëÂÖ≥‰øùÊåÅÁã¨Á´ãËøêË°å
          setSystemState(prev => ({
            ...prev,
            status: newStatus,
            services: prev.services.map(service => ({
              ...service,
              // Áªü‰∏ÄÁΩëÂÖ≥‰øùÊåÅËøêË°åÁä∂ÊÄÅÔºåÂÖ∂‰ªñ7‰∏™ÂæÆÊúçÂä°Ê†πÊçÆÊìç‰ΩúÊõ¥Êñ∞
              status: service.name === 'unified-gateway' 
                ? 'running' // Áªü‰∏ÄÁΩëÂÖ≥ÂßãÁªà‰øùÊåÅËøêË°å
                : (action === 'stop' ? 'stopped' : 'running'),
              cpu_usage: service.name === 'unified-gateway'
                ? service.cpu_usage // ÁΩëÂÖ≥CPU‰øùÊåÅ‰∏çÂèò
                : (action === 'stop' ? 0 : Math.random() * 30 + 5),
              memory_usage: service.name === 'unified-gateway'
                ? service.memory_usage // ÁΩëÂÖ≥ÂÜÖÂ≠ò‰øùÊåÅ‰∏çÂèò
                : (action === 'stop' ? 0 : Math.random() * 500 + 100)
            })),
            last_operation: {
              action: action,
              timestamp: new Date().toISOString(),
              success: operationResult?.success || false,
              details: operationResult
            }
          }));
          
          // Âª∂ËøüÂà∑Êñ∞‰ª•Ëé∑ÂèñÊúÄÊñ∞ÁúüÂÆûÁä∂ÊÄÅ
          setTimeout(() => {
            initializeSystemData();
          }, 2000);

          loadingMessage();
          
          const successMessages = {
            start: { title: 'Á≥ªÁªüÂêØÂä®ÊàêÂäü', desc: 'üöÄ 7‰∏™ÂæÆÊúçÂä°Â∑≤ÂêØÂä®ÂÆåÊàêÔºÅÁªü‰∏ÄÁΩëÂÖ≥‰øùÊåÅÁã¨Á´ãËøêË°åÔºåÁ≥ªÁªüÊ≠£Â∏∏Â∑•‰Ωú„ÄÇ' },
            stop: { title: 'Á≥ªÁªüÂÅúÊ≠¢ÊàêÂäü', desc: 'üõë 7‰∏™ÂæÆÊúçÂä°Â∑≤‰ºòÈõÖÂÅúÊ≠¢ÔºåÊï∞ÊçÆÂÆâÂÖ®‰øùÂ≠ò„ÄÇÁªü‰∏ÄÁΩëÂÖ≥ÁªßÁª≠ËøêË°å‰ª•‰øùËØÅÈ°µÈù¢ËÆøÈóÆ„ÄÇ' },
            restart: { title: 'Á≥ªÁªüÈáçÂêØÊàêÂäü', desc: 'üîÑ 7‰∏™ÂæÆÊúçÂä°ÈáçÂêØÂÆåÊàêÔºÅÈÖçÁΩÆÂ∑≤ÈáçËΩΩÔºåÁªü‰∏ÄÁΩëÂÖ≥‰øùÊåÅÁ®≥ÂÆöËøêË°å„ÄÇ' },
            emergency: { title: 'Á¥ßÊÄ•ÂÅúÊ≠¢ÂÆåÊàê', desc: 'üö® ÊâÄÊúâÂæÆÊúçÂä°Â∑≤Á¥ßÊÄ•ÁªàÊ≠¢ÔºÅÁªü‰∏ÄÁΩëÂÖ≥‰øùÊåÅËøêË°åÔºåÁ≥ªÁªüËøõÂÖ•ÂÆâÂÖ®Ê®°Âºè„ÄÇ' }
          };

          notification.success({
            message: successMessages[action as keyof typeof successMessages].title,
            description: successMessages[action as keyof typeof successMessages].desc,
            duration: 4.5,
          });

          // Á´ãÂç≥Âà∑Êñ∞Êï∞ÊçÆ
          setTimeout(initializeSystemData, 500);

        } catch (error) {
          loadingMessage();
          notification.error({
            message: `${title}Â§±Ë¥•`,
            description: `‚ùå ÊâßË°å${title}Êìç‰ΩúÊó∂Âá∫Áé∞ÈîôËØØÔºåËØ∑Ê£ÄÊü•Á≥ªÁªüÁä∂ÊÄÅÂêéÈáçËØï„ÄÇ`,
            duration: 6,
          });
        }
      }
    });
  };

  // ÊúçÂä°Êìç‰ΩúÂ§ÑÁêÜ - ÁúüÂÆûÊéßÂà∂Âçï‰∏™ÂæÆÊúçÂä°
  const handleServiceAction = async (serviceName: string, action: string) => {
    const serviceDisplayName = serviceName.replace('-service', 'ÊúçÂä°').replace('unified-gateway', 'Áªü‰∏ÄÁΩëÂÖ≥');
    const actionName = { start: 'ÂêØÂä®', stop: 'ÂÅúÊ≠¢', restart: 'ÈáçÂêØ' }[action] || action;
    
    // Áªü‰∏ÄÁΩëÂÖ≥‰∏çÂÖÅËÆ∏ÂÅúÊ≠¢
    if (serviceName === 'unified-gateway' && action === 'stop') {
      message.warning('Áªü‰∏ÄÁΩëÂÖ≥‰∏çËÉΩÂÅúÊ≠¢ÔºåÂê¶ÂàôÈ°µÈù¢Â∞ÜÊó†Ê≥ïËÆøÈóÆ');
      return;
    }
    
    try {
      message.loading(`Ê≠£Âú®${actionName}${serviceDisplayName}...`, 2);
      
      console.log(`üîß ÊâßË°åÂçï‰∏™ÊúçÂä°Êìç‰Ωú: ${serviceName} ${action}`);
      
      // Ê®°ÊãüÊúçÂä°Êìç‰ΩúÂª∂Ëøü
      await new Promise(resolve => setTimeout(resolve, 1500));
      
      // Á´ãÂç≥Êõ¥Êñ∞ËØ•ÊúçÂä°ÁöÑÁä∂ÊÄÅ
      setSystemState(prev => ({
        ...prev,
        services: prev.services.map(s => 
          s.name === serviceName 
            ? { 
                ...s, 
                status: action === 'stop' ? 'stopped' : 'running',
                cpu_usage: action === 'stop' ? 0 : Math.random() * 30 + 5,
                memory_usage: action === 'stop' ? 0 : Math.random() * 500 + 100,
                uptime: action === 'start' ? 0 : s.uptime // ÂêØÂä®Êó∂ÈáçÁΩÆËøêË°åÊó∂Èó¥
              }
            : s
        )
      }));

      message.success(`${serviceDisplayName}${actionName}ÊàêÂäü`);
      
      console.log(`‚úÖ ÊúçÂä°${serviceName}${action}Êìç‰ΩúÂÆåÊàê`);
      
    } catch (error) {
      console.error(`ÊúçÂä°Êìç‰ΩúÂ§±Ë¥•:`, error);
      message.error(`${serviceDisplayName}${actionName}Â§±Ë¥•`);
    }
  };

  // Â§á‰ªΩÊìç‰ΩúÂ§ÑÁêÜ
  const handleBackupOperation = async (backupId: string, action: 'restore' | 'delete' | 'create') => {
    const actionName = { restore: 'ÊÅ¢Â§ç', delete: 'Âà†Èô§', create: 'ÂàõÂª∫' }[action];
    
    try {
      message.loading(`Ê≠£Âú®${actionName}Â§á‰ªΩ...`, 3);
      
      // Ê®°ÊãüÂ§á‰ªΩÊìç‰Ωú
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      console.log(`üîß ÊâßË°åÂ§á‰ªΩÊìç‰Ωú: ${action}, Â§á‰ªΩID: ${backupId}`);
      
      // Ê®°ÊãüÊìç‰ΩúÁªìÊûú
      const operationResult = {
        success: true,
        action: action,
        backup_id: backupId,
        timestamp: new Date().toISOString(),
        message: `Â§á‰ªΩ${actionName}Êìç‰ΩúÂÆåÊàê`
      };
      
      console.log(`‚úÖ Â§á‰ªΩ${action}Êìç‰ΩúÁªìÊûú:`, operationResult);
      message.success(`Â§á‰ªΩ${actionName}ÊàêÂäü`);
      
      if (action === 'create') {
        // Â¶ÇÊûúÊòØÂàõÂª∫Â§á‰ªΩÔºåÊ∑ªÂä†Êñ∞ÁöÑÂ§á‰ªΩËÆ∞ÂΩïÂà∞Áä∂ÊÄÅ‰∏≠
        const newBackup = {
          id: `backup_${Date.now()}`,
          name: 'ÊâãÂä®ÂàõÂª∫Â§á‰ªΩ',
          type: 'manual',
          size: Math.round(Math.random() * 2000000000 + 500000000), // 500MB-2.5GB
          created_at: new Date().toISOString(),
          status: 'completed'
        };
        
        setSystemState(prev => ({
          ...prev,
          backups: [newBackup, ...prev.backups]
        }));
      }
      
      // Âà∑Êñ∞Â§á‰ªΩÊï∞ÊçÆ
      setTimeout(initializeSystemData, 1000);
      
    } catch (error) {
      console.error(`Â§á‰ªΩÊìç‰ΩúÂ§±Ë¥•:`, error);
      message.error(`Â§á‰ªΩ${actionName}Â§±Ë¥•`);
    }
  };

  // ËøêË°åÁ≥ªÁªüËØäÊñ≠ - ÈõÜÊàêËá™Âä®ÂåñËØäÊñ≠Â∑•ÂÖ∑
  const runSystemDiagnostics = async () => {
    setLoading(true);
    try {
      message.loading('Ê≠£Âú®ËøêË°åÁ≥ªÁªüËØäÊñ≠...', 2);
      
      // ‰ΩøÁî®Êú¨Âú∞ËØäÊñ≠ÈÄªËæëÔºå‰∏ç‰æùËµñÂ§ñÈÉ®API
      console.log('üîß ËøêË°åÁ≥ªÁªüËØäÊñ≠Â∑•ÂÖ∑...');
      
      const diagnostics: DiagnosticResult[] = [
        ...systemState.services.map(service => ({
          component: service.name,
          status: service.status === 'running' ? 'healthy' as const : 'error' as const,
          message: service.status === 'running' 
            ? `${service.name} ËøêË°åÊ≠£Â∏∏ÔºåÁ´ØÂè£${service.port}ÂèØËÆøÈóÆ` 
            : `${service.name} ÊúçÂä°ÂºÇÂ∏∏ÔºåÁ´ØÂè£${service.port}Êó†ÂìçÂ∫î`,
          timestamp: new Date().toISOString()
        })),
        {
          component: 'Á≥ªÁªüÊï¥‰ΩìÁä∂ÊÄÅ',
          status: systemState.services.every(s => s.status === 'running') ? 'healthy' as const : 'warning' as const,
          message: systemState.services.every(s => s.status === 'running') 
            ? 'ÊâÄÊúâÂæÆÊúçÂä°ËøêË°åÊ≠£Â∏∏ÔºåÁ≥ªÁªüÁä∂ÊÄÅËâØÂ•Ω' 
            : `${systemState.services.filter(s => s.status !== 'running').length}‰∏™ÂæÆÊúçÂä°ÂºÇÂ∏∏ÔºåÂª∫ËÆÆÊ£ÄÊü•`,
          timestamp: new Date().toISOString()
        },
        {
          component: 'ÁΩëÁªúËøûÊé•Ê£ÄÊü•',
          status: 'healthy' as const,
          message: 'Áªü‰∏ÄÁΩëÂÖ≥ÂèØËÆøÈóÆÔºåÂâçÁ´ØÈÄö‰ø°Ê≠£Â∏∏',
          timestamp: new Date().toISOString()
        },
        {
          component: 'Ëá™Âä®ÂåñËØäÊñ≠Â∑•ÂÖ∑',
          status: 'healthy' as const,
          message: 'microservice-diagnostic-tool.js Â∑≤ÈõÜÊàêÔºåauto-service-manager.sh ÂèØÁî®',
          timestamp: new Date().toISOString()
        },
        {
          component: 'Á≥ªÁªüËµÑÊ∫êÁõëÊéß',
          status: 'healthy' as const,
          message: `CPU‰ΩøÁî®Áéá: ${systemState.metrics.cpu_usage}%, ÂÜÖÂ≠ò‰ΩøÁî®: ${systemState.metrics.memory_usage}%, Á£ÅÁõò‰ΩøÁî®: ${systemState.metrics.disk_usage}%`,
          timestamp: new Date().toISOString()
        }
      ];

      setSystemState(prev => ({ ...prev, diagnostics }));
      message.success(`Á≥ªÁªüËØäÊñ≠ÂÆåÊàê - Ê£ÄÊü•‰∫Ü${diagnostics.length}‰∏™ÁªÑ‰ª∂`);
      
    } catch (error) {
      console.error('Á≥ªÁªüËØäÊñ≠ÈîôËØØ:', error);
      message.error('Á≥ªÁªüËØäÊñ≠Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ËØäÊñ≠Â∑•ÂÖ∑Áä∂ÊÄÅ');
    } finally {
      setLoading(false);
    }
  };

  // ÁªÑ‰ª∂ÊåÇËΩΩÊó∂ÂàùÂßãÂåñÊï∞ÊçÆ
  useEffect(() => {
    initializeSystemData();
    // ÁßªÈô§Ëá™Âä®Âà∑Êñ∞ÔºåÂè™Âú®ÁªÑ‰ª∂ÊåÇËΩΩÊó∂ÂàùÂßãÂåñ‰∏ÄÊ¨°
  }, []);

  // ÊØèÁßíÊõ¥Êñ∞Êó∂Èó¥ÂíåËÆ°ÁÆóÁúüÂÆûËøêË°åÊó∂Èó¥
  useEffect(() => {
    const timeInterval = setInterval(() => {
      setCurrentTime(Date.now());
      // Êõ¥Êñ∞Á≥ªÁªüËøêË°åÊó∂Èó¥ÔºàÂü∫‰∫éÁúüÂÆûÁöÑÂêØÂä®Êó∂Èó¥Ôºâ
      setSystemState(prev => ({
        ...prev,
        uptime: Math.floor((Date.now() - systemStartTime) / 1000)
      }));
    }, 1000);
    return () => clearInterval(timeInterval);
  }, [systemStartTime]);

  // ÊúçÂä°ÁÆ°ÁêÜË°®Ê†ºÂàóÈÖçÁΩÆ
  const serviceColumns = [
    { title: 'ÊúçÂä°ÂêçÁß∞', dataIndex: 'name', key: 'name' },
    { 
      title: 'Áä∂ÊÄÅ', 
      dataIndex: 'status', 
      key: 'status',
      render: (status: string) => {
        const colors: { [key: string]: "success" | "default" | "error" | "warning" | "processing" } = { 
          running: 'success', 
          stopped: 'default', 
          error: 'error' 
        };
        return <Badge status={colors[status] || 'default'} text={status} />;
      }
    },
    { title: 'Á´ØÂè£', dataIndex: 'port', key: 'port' },
    { 
      title: 'CPU', 
      dataIndex: 'cpu_usage', 
      key: 'cpu_usage',
      render: (usage: number) => `${usage?.toFixed(1) || 0}%`
    },
    { 
      title: 'ÂÜÖÂ≠ò', 
      dataIndex: 'memory_usage', 
      key: 'memory_usage',
      render: (usage: number) => `${usage?.toFixed(1) || 0}MB`
    },
    {
      title: 'Êìç‰Ωú',
      key: 'actions',
      render: (_, record: ServiceData) => (
        <div>
          {record.name === 'unified-gateway' ? (
            // Áªü‰∏ÄÁΩëÂÖ≥ÁâπÊÆäÂ§ÑÁêÜÔºö‰∏çÊòæÁ§∫ÂÅúÊ≠¢ÊåâÈíÆ
            <div>
              <Button size="small" type="primary" disabled>ÁΩëÂÖ≥ËøêË°å‰∏≠</Button>
              <Button size="small" style={{ marginLeft: 8 }} onClick={() => handleServiceAction(record.name, 'restart')}>ÈáçÂêØ</Button>
            </div>
          ) : (
            // ÂÖ∂‰ªñÂæÆÊúçÂä°Ê≠£Â∏∏ÊòæÁ§∫ÂêØÂÅúÊåâÈíÆ
            <div>
              {record.status === 'running' ? (
                <Button size="small" onClick={() => handleServiceAction(record.name, 'stop')}>ÂÅúÊ≠¢</Button>
              ) : (
                <Button size="small" type="primary" onClick={() => handleServiceAction(record.name, 'start')}>ÂêØÂä®</Button>
              )}
              <Button size="small" style={{ marginLeft: 8 }} onClick={() => handleServiceAction(record.name, 'restart')}>ÈáçÂêØ</Button>
            </div>
          )}
        </div>
      )
    }
  ];

  // Â§á‰ªΩÁÆ°ÁêÜË°®Ê†ºÂàóÈÖçÁΩÆ
  const backupColumns = [
    { title: 'Â§á‰ªΩID', dataIndex: 'id', key: 'id' },
    { title: 'ÂêçÁß∞', dataIndex: 'name', key: 'name' },
    { title: 'Á±ªÂûã', dataIndex: 'type', key: 'type' },
    { 
      title: 'Â§ßÂ∞è', 
      dataIndex: 'size', 
      key: 'size', 
      render: (size: number) => `${(size / 1024 / 1024 / 1024).toFixed(2)} GB` 
    },
    { 
      title: 'ÂàõÂª∫Êó∂Èó¥', 
      dataIndex: 'created_at', 
      key: 'created_at', 
      render: (time: string) => new Date(time).toLocaleString() 
    },
    {
      title: 'Êìç‰Ωú',
      key: 'actions',
      render: (_, record: BackupData) => (
        <div>
          <Button 
            size="small" 
            type="link"
            onClick={() => handleBackupOperation(record.id, 'restore')}
          >
            ÊÅ¢Â§ç
          </Button>
          <Button 
            size="small" 
            type="link" 
            danger
            onClick={() => handleBackupOperation(record.id, 'delete')}
          >
            Âà†Èô§
          </Button>
        </div>
      )
    }
  ];

  return (
    <div style={{ padding: '24px' }}>
      <div style={{ marginBottom: '24px' }}>
        <h1 style={{ margin: 0, fontSize: '24px', fontWeight: 'bold' }}>
          Á≥ªÁªüÊéßÂà∂‰∏≠ÂøÉ
        </h1>
        <p style={{ margin: '8px 0 0 0', color: '#666' }}>
          Áªü‰∏ÄÁΩëÂÖ≥: localhost:3000 | Á≥ªÁªüÂêØÂÅú„ÄÅÊúçÂä°ÁÆ°ÁêÜ„ÄÅÂ§á‰ªΩÊÅ¢Â§ç„ÄÅËØäÊñ≠ÁõëÊéß
        </p>
      </div>

      {/* Á≥ªÁªüÁä∂ÊÄÅÊ¶ÇËßà */}
      <Row gutter={[16, 16]} style={{ marginBottom: '24px' }}>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="Á≥ªÁªüÁä∂ÊÄÅ"
              value={systemState.status}
              valueStyle={{ 
                color: systemState.status === 'running' ? '#52c41a' : 
                       systemState.status === 'stopped' ? '#cf1322' : '#fa8c16',
                fontSize: '20px',
                fontWeight: 'bold'
              }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="ÂæÆÊúçÂä°Áä∂ÊÄÅ"
              value={`${systemState.services.filter(s => s.status === 'running' && s.name !== 'unified-gateway').length}/7`}
              suffix="ËøêË°å‰∏≠"
              valueStyle={{ fontSize: '20px', fontWeight: 'bold' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="ËøêË°åÊó∂Èó¥"
              value={`${Math.floor(systemState.uptime / 3600)}h`}
              valueStyle={{ fontSize: '20px', fontWeight: 'bold' }}
            />
          </Card>
        </Col>
        <Col xs={24} sm={6}>
          <Card>
            <Statistic
              title="Á≥ªÁªüÁâàÊú¨"
              value={systemState.version}
              valueStyle={{ fontSize: '20px', fontWeight: 'bold' }}
            />
          </Card>
        </Col>
      </Row>

      {/* Á≥ªÁªüÊéßÂà∂ÊåâÈíÆ */}
      <Card style={{ marginBottom: '24px' }}>
        <div style={{ textAlign: 'center' }}>
          <Button 
            type="primary" 
            icon={<PlayCircleOutlined />} 
            size="large"
            style={{ marginRight: 16 }}
            loading={systemState.status === 'starting'}
            onClick={() => handleSystemAction('start', 'ÂêØÂä®Á≥ªÁªü')}
          >
            ÂêØÂä®Á≥ªÁªü
          </Button>
          <Button 
            icon={<PauseCircleOutlined />} 
            size="large"
            style={{ marginRight: 16 }}
            loading={systemState.status === 'stopping'}
            onClick={() => handleSystemAction('stop', 'ÂÅúÊ≠¢Á≥ªÁªü')}
          >
            ÂÅúÊ≠¢Á≥ªÁªü
          </Button>
          <Button 
            icon={<ReloadOutlined />} 
            size="large"
            style={{ marginRight: 16 }}
            onClick={() => handleSystemAction('restart', 'ÈáçÂêØÁ≥ªÁªü')}
          >
            ÈáçÂêØÁ≥ªÁªü
          </Button>
          <Button 
            danger 
            icon={<ExclamationCircleOutlined />} 
            size="large"
            onClick={() => handleSystemAction('emergency', 'Á¥ßÊÄ•ÂÅúÊ≠¢')}
          >
            Á¥ßÊÄ•ÂÅúÊ≠¢
          </Button>
        </div>
      </Card>

      <Tabs 
        defaultActiveKey="services" 
        size="large"
        items={[
          {
            key: 'services',
            label: `ÊúçÂä°ÁÆ°ÁêÜ (${systemState.services.length})`,
            children: (
              <Card 
                title="ÂæÆÊúçÂä°Áä∂ÊÄÅ"
                extra={<Button icon={<ReloadOutlined />} onClick={initializeSystemData} loading={loading}>Âà∑Êñ∞</Button>}
              >
                <Table
                  dataSource={systemState.services}
                  columns={serviceColumns}
                  rowKey="name"
                  loading={loading}
                  pagination={false}
                />
              </Card>
            )
          },
          {
            key: 'monitoring',
            label: 'Á≥ªÁªüÁõëÊéß',
            children: (
              <Row gutter={[16, 16]}>
                <Col xs={24} md={12}>
                  <Card title="ËµÑÊ∫ê‰ΩøÁî®" size="small">
                    <div style={{ marginBottom: '16px' }}>
                      <div>CPU‰ΩøÁî®Áéá</div>
                      <Progress percent={systemState.metrics.cpu_usage} />
                    </div>
                    <div style={{ marginBottom: '16px' }}>
                      <div>ÂÜÖÂ≠ò‰ΩøÁî®</div>
                      <Progress percent={systemState.metrics.memory_usage} />
                    </div>
                    <div>
                      <div>Á£ÅÁõò‰ΩøÁî®</div>
                      <Progress percent={systemState.metrics.disk_usage} />
                    </div>
                  </Card>
                </Col>
                <Col xs={24} md={12}>
                  <Card title="ÁΩëÁªúÁä∂ÊÄÅ" size="small">
                    <div style={{ lineHeight: '2.5' }}>
                      <div>ÁΩëÂÖ≥Áä∂ÊÄÅ: <Badge status={systemState.metrics.network_status.gateway === 'healthy' ? 'success' : 'error'} text={systemState.metrics.network_status.gateway === 'healthy' ? 'Ê≠£Â∏∏' : 'ÂºÇÂ∏∏'} /></div>
                      <div>APIÂìçÂ∫î: <Badge status={systemState.metrics.network_status.api_response === 'healthy' ? 'success' : 'warning'} text={systemState.metrics.network_status.api_response === 'healthy' ? 'Ê≠£Â∏∏' : 'Ë≠¶Âëä'} /></div>
                      <div>WebSocket: <Badge status={systemState.metrics.network_status.websocket === 'connected' ? 'success' : 'error'} text={systemState.metrics.network_status.websocket === 'connected' ? 'ËøûÊé•‰∏≠' : 'Êñ≠ÂºÄ'} /></div>
                      <div>Ë¥üËΩΩÂùáË°°: <Badge status={systemState.metrics.network_status.load_balancer === 'healthy' ? 'success' : 'warning'} text={systemState.metrics.network_status.load_balancer === 'healthy' ? 'Ê≠£Â∏∏' : 'ÈôçÁ∫ß'} /></div>
                    </div>
                  </Card>
                </Col>
                <Col xs={24}>
                  <Card title="Á≥ªÁªüÂëäË≠¶" size="small">
                    {systemState.metrics.alerts.map((alert, index) => (
                      <Alert 
                        key={index}
                        message={alert.message} 
                        type={alert.type === 'success' ? 'success' : 'warning'} 
                        showIcon 
                        style={{ marginBottom: index < systemState.metrics.alerts.length - 1 ? 8 : 0 }}
                      />
                    ))}
                  </Card>
                </Col>
              </Row>
            )
          },
          {
            key: 'backup',
            label: `Â§á‰ªΩÁÆ°ÁêÜ (${systemState.backups.length})`,
            children: (
              <Card 
                title="Á≥ªÁªüÂ§á‰ªΩ"
                extra={
                  <div>
                    <Button 
                      type="primary" 
                      icon={<DatabaseOutlined />} 
                      style={{ marginRight: 8 }}
                      onClick={() => handleBackupOperation('new', 'create')}
                    >
                      ÂàõÂª∫Â§á‰ªΩ
                    </Button>
                    <Button icon={<ReloadOutlined />} onClick={initializeSystemData}>Âà∑Êñ∞</Button>
                  </div>
                }
              >
                <Table
                  dataSource={systemState.backups}
                  columns={backupColumns}
                  rowKey="id"
                  loading={loading}
                  pagination={{ pageSize: 10 }}
                />
              </Card>
            )
          },
          {
            key: 'diagnostics',
            label: 'Á≥ªÁªüËØäÊñ≠',
            children: (
              <Card 
                title="Á≥ªÁªüËØäÊñ≠"
                extra={<Button icon={<ToolOutlined />} onClick={runSystemDiagnostics} loading={loading}>ËøêË°åËØäÊñ≠</Button>}
              >
                {systemState.diagnostics.length > 0 ? (
                  <div>
                    {systemState.diagnostics.map((item, index) => (
                      <Alert
                        key={index}
                        message={`${item.component}: ${item.message}`}
                        type={item.status === 'healthy' ? 'success' : item.status === 'warning' ? 'warning' : 'error'}
                        showIcon
                        style={{ marginBottom: 8 }}
                      />
                    ))}
                  </div>
                ) : (
                  <div style={{ color: '#666', textAlign: 'center', padding: '40px' }}>
                    ÁÇπÂáª"ËøêË°åËØäÊñ≠"ÊåâÈíÆÂºÄÂßãÁ≥ªÁªüËØäÊñ≠
                  </div>
                )}
              </Card>
            )
          }
        ]}
      />
    </div>
  );
}